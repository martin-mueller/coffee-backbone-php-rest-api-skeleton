// Generated by CoffeeScript 1.6.2
var app,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = app || {};

$(function() {
  var _ref, _ref1, _ref2;

  app.Widget = (function(_super) {
    __extends(Widget, _super);

    function Widget() {
      _ref = Widget.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Widget.prototype.urlRoot = 'server.php/notes';

    Widget.prototype.defaults = {
      "type": "note",
      "text": "",
      "pos": {
        "top": 150,
        "left": 200
      },
      "size": {
        "width": 250,
        "height": 250
      },
      "z-index": 1
    };

    Widget.prototype.initialize = function() {
      this.on("change:pos", this.savePos);
      this.on("change:size", this.saveSize);
      this.on("change:text", this.saveText);
      return this.on("all", function(e) {
        return console.log("Note event:" + e);
      });
    };

    Widget.prototype.savePos = function() {
      console.log(this.get("z-index"));
      return this.save(this.pos);
    };

    Widget.prototype.saveSize = function() {
      return this.save(this.size);
    };

    Widget.prototype.saveText = function() {
      return this.save(this.text);
    };

    Widget.prototype.validate = function(attrs, options) {};

    return Widget;

  })(Backbone.Model);
  app.Note = (function(_super) {
    __extends(Note, _super);

    function Note() {
      _ref1 = Note.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Note;

  })(app.Widget);
  return app.Widgets = (function(_super) {
    __extends(Widgets, _super);

    function Widgets() {
      _ref2 = Widgets.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Widgets.prototype.url = 'server.php/notes';

    Widgets.prototype.model = function(attrs, options) {
      switch (attrs.type) {
        case 'note':
          return new app.Note(attrs, options);
      }
    };

    Widgets.prototype.editEl = null;

    Widgets.prototype.isLocked = false;

    return Widgets;

  })(Backbone.Collection);
});
