// Generated by CoffeeScript 1.6.2
var app,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

app = app || {};

$(function() {
  var _ref, _ref1, _ref2, _ref3;

  app.Note = (function(_super) {
    __extends(Note, _super);

    function Note() {
      _ref = Note.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Note.prototype.urlRoot = 'server.php/notes';

    Note.prototype.defaults = {
      text: "",
      pos: {
        x: 0,
        y: 0
      },
      size: {
        width: 100,
        height: 100
      }
    };

    Note.prototype.initialize = function() {
      return this.on("all", function(e) {
        return console.log("Note event:" + e + ' text:' + this.get("text"));
      });
    };

    Note.prototype.validate = function(attrs, options) {};

    return Note;

  })(Backbone.Model);
  app.Notes = (function(_super) {
    __extends(Notes, _super);

    function Notes() {
      _ref1 = Notes.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Notes.prototype.url = 'server.php/notes';

    Notes.prototype.model = app.Note;

    return Notes;

  })(Backbone.Collection);
  app.notes = new app.Notes;
  app.NoteView = (function(_super) {
    __extends(NoteView, _super);

    function NoteView() {
      _ref2 = NoteView.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    NoteView.prototype.initialize = function() {
      this.listenTo(this.model, 'destroy', this.remove);
      return this.$el.html(this.template(this.model.toJSON()));
    };

    NoteView.prototype.template = _.template($('#item-template').html());

    NoteView.prototype.events = {
      "click .close": "clear"
    };

    NoteView.prototype.clear = function(e) {
      e.stopImmediatePropagation();
      return this.model.destroy();
    };

    return NoteView;

  })(Backbone.View);
  return app.DeskView = (function(_super) {
    __extends(DeskView, _super);

    function DeskView() {
      _ref3 = DeskView.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    DeskView.prototype.initialize = function() {
      return this.listenTo(app.notes, 'add', this.addOne);
    };

    DeskView.prototype.el = '#wrapper';

    DeskView.prototype.events = {
      "click #add": "addNote",
      "add": "addOne"
    };

    DeskView.prototype.addNote = function() {
      console.log("Add Clicked");
      return app.notes.create({
        text: 'test'
      });
    };

    DeskView.prototype.addOne = function(note) {
      var view;

      view = new app.NoteView({
        model: note,
        id: "note-" + note.cid
      });
      $('#wrapper').append(view.el);
      return view.$el.draggable();
    };

    return DeskView;

  })(Backbone.View);
});
